
public class VMain1 {
	public static void main(String[] args) {
		// *컴퓨터 장치*
		// CPU / RAM / HDD / GPU
		// CPU : 연산장치 (Intel : i5-xxx, i7-xxx / AMD : ryzenX)
		// HDD(SSD포함) : 파일형태로 저장(장치)
		// 		-> 영구저장
		// RAM : 변수형태로 저장(장치)
		// 		-> 임시저장
		// GPU : 그래픽처리용 (CPU + HDD + RAM)
		
		// 데이터를 임시보존 -> RAM에 변수로 저장!
		// 데이터를 영구보존 -> HDD에 파일로 저장!
		// 		-> 도대체 변수라는게 뭔가용~?
		
		// syso로 글자나 숫자를 출력했을 때 -> 휘발성(1회용)임!
		//  	-> 재사용이 불가능!

		System.out.println("ㅋ" + "ㅎ");
		System.out.println(3);

		// -> 우리가 아는 선.
		// -> 계산을하다가 마지막에 계산된 값들이 100줄 뒤에 필요하다면?
		
		// 변수!(Variable) : 데이터를 저장하는 공간
		// 왜? 라기보다는 "언제?" 에 초점을 둬라!
		// 좀 더 쉽게 말하자면 데이터를 담는 [그릇]
		
		// 변수 문법 (어떻게 사용하는지?) 2가지 절차~
		//		1. 변수 선언 (만들기) - RAM에 공간을 확보해서
		//							   무언가를 담을 수 있는공간을 만든다!
		//			(자료형 변수명;) 의 형태를 변수를 '선언' 했다라고 표현
		// 			(그릇 종류 그릇이름);
		//		2. 변수 초기화
		// 변수에 값을 넣어줘야 하는데,,
		//			(변수명 = 값;) 의 형태로 표현
		//			-자료형 : 변수가 어떤 값으로 저장할지 그 형태
		//			-변수명 : 말그대로 변수 이름
		//			String s; : 문자열(String)을 담을 그릇 s
		//			int i; : 정수(int)를 담을 그릇 i
		
		//		변수 선언과 초기화를 동시에 하는 것도 가능!
		//		(자료형 변수명 = 값;)의 형태
		//		 -> 이 형태를 변수를 만든다! 라고 표현하기로~
		
		
		// 변수이름 규칙
		// 	1. 숫자로 시작하면 에러!
	//	 	int i = 3;
	//	 	int 3i = 3;
		//	2. 특수문자, 띄어쓰기 에러!
	//		String s = "ㅋㅋㅋ";  (o)
	// 	  	String @ = "ㅋㅋ";    (x)
	//	    String u u = "ㅋㅋㅋ";(x)
		//  3. 자바문법(예약어) 사용하면 에러!
	//		int int = 3; (o)
	//		int _int = 3;  -> 아래 하이픈 써서 에러를 방지하는 방법도 있음!	
		// Java문화
		//	4. 변수명을 봐도 뭔지 알 수 있게!
	//		int akdfjkdf = 2;
	//		int age =2;
		//	5. 가독성을 위해서 (띄어쓰기가 필요할 때)
		//		1) 뱀체 -> 하이픈 사용
	//			  int priceofcomputer = 10000;
	//			  int price_of_computer = 10000;
		//		2) 낙타체 -> 맨앞글자 대문자로
	//			  int priceofcomputer = 10000;
	//			  int pirceOfComputer = 10000;
		//	6. 한글 사용x (써도되지만, 가급적 영어로)
		
		//
		
		// =(등호) : 대입연산자
		// -> 변수를 만들었을 때 '=' 에 대해 살펴봐야,,
		//		 A = B
		//		현실) A와 B가 같다
		//		프로그래밍전반) A에다가 B라는 값을 넣어라!
		
		// 자료형 
		// 		bit : 데이터를 나타내는 최소 단위
		//		 -> binary digit(이진수)
		//		 -> 모든 데이터가 0, 1의 조합으로 구성되는데,
		//			이때 0, 1의 값이 하나의 bit가 되는 셈!
		
		//  -기본형
		// 		정수
		//			byte : -128 ~ 127
		//			short : 약 -3만 ~ 3만
		//			int :  약 -21억 ~ 21억
		//			long : int를 벗어나는 범위
		// 		실수
		//			float 
		//			double (v)
		//			다른언어 : float / Java 한정 : double
		// 		문자
		//			char (거의 안 씀)
		// 		논리
		//			boolean : 참/거짓 (true/false)
		// 		없음
		//			void : '없음'을 나타냄 (나중에 알아보아요~)
		
		// 참조형
		//		기본형이 아닌 것들은 모두 참조형!
		//		문자열
		//			String : 문자열(여러글자)를 저장, 꼭 앞에 대문자 S!!!
		
		// char vs String
		 //  char c = 'ㅋㅋ'; // -> 한글자를 담는,, / 작은따옴표!
		//   -> char를 사용할 때는 작은따옴표!
		   String s = "ㅋㅋㅋㅋㅋㅋㅋ";
		   
// -> 이것들은 모두 외우는 것이 아니야! 익히는거다~~ 헷갈릴때만 찾아보아요~
		   
		// 변수 선언 후 값 넣기!
		  int num;
		  num =17;
		  
		  int floor;
		  floor = 5;
		  
	   // floor = 5.5; -> 정수가 아니라 실수여서 에러다~
		  
		// 변수선언과 동시에 초기화 설정하기!
		  int num2 = 17;
		  //int floor2 = "five";
		  double subway = 9; 
		  System.out.println(subway); //9.0
		  // double에 int 값을 넣는 것은 가능!
		  // 넓게 보면 9는 9.0도 가능하기 때문에!
		   
		  // 자료형을 쓰면 변수 만드는 것까지 포함
		  int a = 10; // 변수 a라는 만들기 + a에 10 넣기
		  // int a;
		  // a = 10;
		  // -> 원래 이렇게 두줄로 표현하였는데,, 저렇게도 가능하당
		  
		  // 자료형을 안 쓰면 값 수정
		  // b = 20;
		  
		  // Python : 자바보다 고급언어(개발자가 x, 언어가 자동)
		  //							자료형을 Python이 알아서 선택
		  // a = 10;  // 변수가 없으면 a를 만들어서 10을 넣고,
		  // a = 10;  // 변수가 있으면 a값을 바꾸는 
		  
		  // 변수끼리도 계산이 가능함!
		  System.out.println(num + floor);
		  
		  
		  // 메모리의 영역
		  //  ???
		  //  Stack
		  //   -> 프로그램이 끝나면 자동으로 정리
		  //   -> 밑에서부터 차곡차곡 쌓이는,, <기본형>
		  //  Heap
		  //   -> 프로그램이 끝나도 여전히 남아있음
		  //   -> 컴퓨터가 적당하다고 판단한 어떠한 위치에 만들어버림 (번지)
		  
		  // 면접질문) Garbage Collection : Heap영역 자동정리시스템!
		  // 	-> 아주 중요한 용어인데,, 지금은 설명이 불가능하다!

		  
		  
		  
		
		
		
		
		
		
		
		
		
		
		
	}
}
